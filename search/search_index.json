{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Unminder \u00a4 Queue things in a list, review them later. Requirements \u00a4 Unminder requires Python 3.6 or above. To install Python 3.6, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.6 pyenv install 3 .6.8 # make it available globally pyenv global system 3 .6.8 Installation \u00a4 With pip : python3.6 -m pip install unminder With pipx : python3.6 -m pip install --user pipx pipx install --python python3.6 unminder","title":"Overview"},{"location":"#unminder","text":"Queue things in a list, review them later.","title":"Unminder"},{"location":"#requirements","text":"Unminder requires Python 3.6 or above. To install Python 3.6, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.6 pyenv install 3 .6.8 # make it available globally pyenv global system 3 .6.8","title":"Requirements"},{"location":"#installation","text":"With pip : python3.6 -m pip install unminder With pipx : python3.6 -m pip install --user pipx pipx install --python python3.6 unminder","title":"Installation"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . Unrealeased \u00a4 Compare with latest Features \u00a4 Initial commit ( b334857 by Timoth\u00e9e Mazzucotelli).","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unrealeased","text":"Compare with latest","title":"Unrealeased"},{"location":"changelog/#features","text":"Initial commit ( b334857 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00a4 Our Pledge \u00a4 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00a4 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00a4 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00a4 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00a4 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00a4 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Attribution"},{"location":"contributing/","text":"Contributing \u00a4 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Environment setup \u00a4 Nothing easier! Fork and clone the repository, then: cd unminder make setup That's it! You now have the dependencies installed. You can run the application with poetry run queue [ARGS...] . Run make help to see all the available actions! Development \u00a4 As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this. Commit message convention \u00a4 Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15. Pull requests guidelines \u00a4 Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"contributing/#environment-setup","text":"Nothing easier! Fork and clone the repository, then: cd unminder make setup That's it! You now have the dependencies installed. You can run the application with poetry run queue [ARGS...] . Run make help to see all the available actions!","title":"Environment setup"},{"location":"contributing/#development","text":"As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this.","title":"Development"},{"location":"contributing/#commit-message-convention","text":"Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15.","title":"Commit message convention"},{"location":"contributing/#pull-requests-guidelines","text":"Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Pull requests guidelines"},{"location":"credits/","text":"Credits \u00a4","title":"Credits"},{"location":"credits/#credits","text":"","title":"Credits"},{"location":"reference/cli/","text":"\u00a4 Module that contains the command line application. get_user_credentials () \u00a4 Utility function to get a user's credentials from environment variables. Source code in unminder/cli.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def get_user_credentials (): \"\"\"Utility function to get a user's credentials from environment variables.\"\"\" try : username = os . environ [ \"TELEGRAM_USERNAME\" ] api_id = int ( os . environ [ \"TELEGRAM_API_ID\" ]) api_hash = os . environ [ \"TELEGRAM_API_HASH\" ] except ( TypeError , KeyError ): print ( \"error: Please set the following environment variables: \\n \" \"TELEGRAM_USERNAME, TELEGRAM_API_ID, TELEGRAM_API_HASH\" , file = sys . stderr , ) sys . exit ( 1 ) return username , api_id , api_hash queue ( args = None ) \u00a4 The queue command. Source code in unminder/cli.py 37 38 39 40 41 42 def queue ( args = None ): \"\"\"The queue command.\"\"\" parser = argparse . ArgumentParser ( prog = \"queue\" ) opts = parser . parse_args ( args = args ) print ( opts ) return 0 review ( args = None ) \u00a4 The review command. Source code in unminder/cli.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def review ( args = None ): \"\"\"The review command.\"\"\" parser = argparse . ArgumentParser ( prog = \"review\" ) opts = parser . parse_args ( args = args ) # noqa username , api_id , api_hash = get_user_credentials () client = TelegramClient ( \"review\" , api_id , api_hash ) client . start () messages = list ( reversed ( client . iter_messages ( username ))) print ( len ( messages )) download_media = False for message in messages : if not message . message : if download_media : media = message . download_media () if media : print ( media ) else : print ( message . message ) print () return 0","title":"cli.py"},{"location":"reference/cli/#unminder.cli","text":"Module that contains the command line application.","title":"unminder.cli"},{"location":"reference/cli/#unminder.cli.get_user_credentials","text":"Utility function to get a user's credentials from environment variables. Source code in unminder/cli.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def get_user_credentials (): \"\"\"Utility function to get a user's credentials from environment variables.\"\"\" try : username = os . environ [ \"TELEGRAM_USERNAME\" ] api_id = int ( os . environ [ \"TELEGRAM_API_ID\" ]) api_hash = os . environ [ \"TELEGRAM_API_HASH\" ] except ( TypeError , KeyError ): print ( \"error: Please set the following environment variables: \\n \" \"TELEGRAM_USERNAME, TELEGRAM_API_ID, TELEGRAM_API_HASH\" , file = sys . stderr , ) sys . exit ( 1 ) return username , api_id , api_hash","title":"get_user_credentials()"},{"location":"reference/cli/#unminder.cli.queue","text":"The queue command. Source code in unminder/cli.py 37 38 39 40 41 42 def queue ( args = None ): \"\"\"The queue command.\"\"\" parser = argparse . ArgumentParser ( prog = \"queue\" ) opts = parser . parse_args ( args = args ) print ( opts ) return 0","title":"queue()"},{"location":"reference/cli/#unminder.cli.review","text":"The review command. Source code in unminder/cli.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def review ( args = None ): \"\"\"The review command.\"\"\" parser = argparse . ArgumentParser ( prog = \"review\" ) opts = parser . parse_args ( args = args ) # noqa username , api_id , api_hash = get_user_credentials () client = TelegramClient ( \"review\" , api_id , api_hash ) client . start () messages = list ( reversed ( client . iter_messages ( username ))) print ( len ( messages )) download_media = False for message in messages : if not message . message : if download_media : media = message . download_media () if media : print ( media ) else : print ( message . message ) print () return 0","title":"review()"}]}